// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Skills.Databases;

#nullable disable

namespace Skills.Migrations
{
    [DbContext(typeof(SkillsContext))]
    [Migration("20240801100109_AddsUserSafetyCertificationExpireDate")]
    partial class AddsUserSafetyCertificationExpireDate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.3");

            modelBuilder.Entity("Skills.Models.AbstractSkillModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Category")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("GroupId")
                        .HasColumnType("TEXT");

                    b.Property<string>("SubCategory")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("TypeId");

                    b.ToTable("AbstractSkillModel");

                    b.HasDiscriminator<string>("Discriminator").HasValue("AbstractSkillModel");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Skills.Models.CV.CvCertificationInfo", b =>
                {
                    b.Property<Guid>("CvId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CertificationId")
                        .HasColumnType("TEXT");

                    b.HasKey("CvId", "CertificationId");

                    b.HasIndex("CertificationId");

                    b.ToTable("CvCertifications");
                });

            modelBuilder.Entity("Skills.Models.CV.CvEducationInfo", b =>
                {
                    b.Property<Guid>("CvId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EducationId")
                        .HasColumnType("TEXT");

                    b.HasKey("CvId", "EducationId");

                    b.HasIndex("EducationId");

                    b.ToTable("CvEducations");
                });

            modelBuilder.Entity("Skills.Models.CV.CvExperienceInfo", b =>
                {
                    b.Property<Guid>("CvId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ExperienceId")
                        .HasColumnType("TEXT");

                    b.HasKey("CvId", "ExperienceId");

                    b.HasIndex("ExperienceId");

                    b.ToTable("CvExperiences");
                });

            modelBuilder.Entity("Skills.Models.CV.CvInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Job")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("MinLevel")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("UserSafetyCertificationInfoId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserSafetyCertificationInfoId");

                    b.ToTable("CVs");
                });

            modelBuilder.Entity("Skills.Models.CV.CvSkillInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CvId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsSoftSkill")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CvId");

                    b.HasIndex("SkillId");

                    b.ToTable("CvSkills");
                });

            modelBuilder.Entity("Skills.Models.CV.SafetyCertification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Enabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("SafetyCertifications");
                });

            modelBuilder.Entity("Skills.Models.GroupModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Icon")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("Skills.Models.Overview.UserCertificationInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Supplier")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Year")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserCertifications");
                });

            modelBuilder.Entity("Skills.Models.Overview.UserEducationInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Supplier")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Town")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<int>("YearEnd")
                        .HasColumnType("INTEGER");

                    b.Property<int>("YearStart")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserEducations");
                });

            modelBuilder.Entity("Skills.Models.Overview.UserExperienceInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EndsAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartsAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserExperiences");
                });

            modelBuilder.Entity("Skills.Models.Overview.UserSafetyCertificationInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CertId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CertId");

                    b.HasIndex("UserId");

                    b.ToTable("UserSafetyCertifications");
                });

            modelBuilder.Entity("Skills.Models.SKillInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Icon")
                        .HasColumnType("TEXT");

                    b.Property<int>("IconColor")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IconType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("SkillsTypes");
                });

            modelBuilder.Entity("Skills.Models.SoftTypeLevel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("Level")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SkillId");

                    b.ToTable("SoftTypesLevels");
                });

            modelBuilder.Entity("Skills.Models.TypeLevel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("Level")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("TypesLevels");
                });

            modelBuilder.Entity("Skills.Models.UserModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("GroupId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Job")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("TEXT");

                    b.Property<int>("Role")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Skills.Models.UserNotification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RecipientId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Severity")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RecipientId");

                    b.HasIndex("SenderId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Skills.Models.UserSkillModel", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Level")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("UsersSkills");
                });

            modelBuilder.Entity("Skills.Models.SkillModel", b =>
                {
                    b.HasBaseType("Skills.Models.AbstractSkillModel");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("SubCategoryId")
                        .HasColumnType("TEXT");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SubCategoryId");

                    b.HasDiscriminator().HasValue("SkillModel");
                });

            modelBuilder.Entity("Skills.Models.SoftSkillModel", b =>
                {
                    b.HasBaseType("Skills.Models.AbstractSkillModel");

                    b.HasDiscriminator().HasValue("SoftSkillModel");
                });

            modelBuilder.Entity("Skills.Models.AbstractSkillModel", b =>
                {
                    b.HasOne("Skills.Models.GroupModel", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId");

                    b.HasOne("Skills.Models.SKillInfo", "TypeInfo")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("TypeInfo");
                });

            modelBuilder.Entity("Skills.Models.CV.CvCertificationInfo", b =>
                {
                    b.HasOne("Skills.Models.Overview.UserCertificationInfo", "Certification")
                        .WithMany()
                        .HasForeignKey("CertificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Skills.Models.CV.CvInfo", "Cv")
                        .WithMany()
                        .HasForeignKey("CvId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Certification");

                    b.Navigation("Cv");
                });

            modelBuilder.Entity("Skills.Models.CV.CvEducationInfo", b =>
                {
                    b.HasOne("Skills.Models.CV.CvInfo", "Cv")
                        .WithMany()
                        .HasForeignKey("CvId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Skills.Models.Overview.UserEducationInfo", "Education")
                        .WithMany()
                        .HasForeignKey("EducationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cv");

                    b.Navigation("Education");
                });

            modelBuilder.Entity("Skills.Models.CV.CvExperienceInfo", b =>
                {
                    b.HasOne("Skills.Models.CV.CvInfo", "Cv")
                        .WithMany()
                        .HasForeignKey("CvId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Skills.Models.Overview.UserExperienceInfo", "Experience")
                        .WithMany()
                        .HasForeignKey("ExperienceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cv");

                    b.Navigation("Experience");
                });

            modelBuilder.Entity("Skills.Models.CV.CvInfo", b =>
                {
                    b.HasOne("Skills.Models.Overview.UserSafetyCertificationInfo", null)
                        .WithMany("CVs")
                        .HasForeignKey("UserSafetyCertificationInfoId");
                });

            modelBuilder.Entity("Skills.Models.CV.CvSkillInfo", b =>
                {
                    b.HasOne("Skills.Models.CV.CvInfo", "Cv")
                        .WithMany("Skills")
                        .HasForeignKey("CvId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Skills.Models.AbstractSkillModel", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cv");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("Skills.Models.Overview.UserCertificationInfo", b =>
                {
                    b.HasOne("Skills.Models.UserModel", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Skills.Models.Overview.UserEducationInfo", b =>
                {
                    b.HasOne("Skills.Models.UserModel", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Skills.Models.Overview.UserExperienceInfo", b =>
                {
                    b.HasOne("Skills.Models.UserModel", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Skills.Models.Overview.UserSafetyCertificationInfo", b =>
                {
                    b.HasOne("Skills.Models.CV.SafetyCertification", "Certification")
                        .WithMany()
                        .HasForeignKey("CertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Skills.Models.UserModel", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Certification");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Skills.Models.SoftTypeLevel", b =>
                {
                    b.HasOne("Skills.Models.SoftSkillModel", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("Skills.Models.TypeLevel", b =>
                {
                    b.HasOne("Skills.Models.SKillInfo", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Skills.Models.UserModel", b =>
                {
                    b.HasOne("Skills.Models.GroupModel", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Skills.Models.UserNotification", b =>
                {
                    b.HasOne("Skills.Models.UserModel", "Recipient")
                        .WithMany()
                        .HasForeignKey("RecipientId");

                    b.HasOne("Skills.Models.UserModel", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId");

                    b.Navigation("Recipient");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Skills.Models.UserSkillModel", b =>
                {
                    b.HasOne("Skills.Models.AbstractSkillModel", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Skills.Models.UserModel", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Skills.Models.SkillModel", b =>
                {
                    b.HasOne("Skills.Models.SKillInfo", "CategoryInfo")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Skills.Models.SKillInfo", "SubCategoryInfo")
                        .WithMany()
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("CategoryInfo");

                    b.Navigation("SubCategoryInfo");
                });

            modelBuilder.Entity("Skills.Models.CV.CvInfo", b =>
                {
                    b.Navigation("Skills");
                });

            modelBuilder.Entity("Skills.Models.Overview.UserSafetyCertificationInfo", b =>
                {
                    b.Navigation("CVs");
                });
#pragma warning restore 612, 618
        }
    }
}
