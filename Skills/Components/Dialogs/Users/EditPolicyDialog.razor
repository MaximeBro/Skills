@using Skills.Models.Enums
<MudDialog Class="pa-0 rounded-lg">
    <DialogContent>
        <MudIconButton Class="ml-n4" Icon="@IconsF.Close" Color="Color.Dark" OnClick="@(() => Dialog.Close())" />
        <MudStack Class="px-4 py-2" Row="false" Justify="Justify.Center">
            <MudSelect T="PermissionPolicy" @bind-SelectedValues="_policies" MultiSelection Label="Autorisations" Style="width: 500px;"
                       AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter">
                @foreach (var value in Enum.GetValues<PermissionPolicy>())
                {
                    <MudSelectItem Value="value">@value.ToString()</MudSelectItem>
                }
            </MudSelect>
        </MudStack>
    </DialogContent>
    <DialogActions>
        <MudButton Class="mark-one" Style="text-transform: none;" Color="Color.Success" Variant="Variant.Text" OnClick="@Submit">Enregistrer</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] public MudDialogInstance Dialog { get; set; } = null!;

    [Parameter] public PermissionPolicy Policy { get; set; }

    private IEnumerable<PermissionPolicy> _policies = new HashSet<PermissionPolicy>();

    protected override void OnInitialized()
    {
        var list = new List<PermissionPolicy>();
        foreach (var value in Enum.GetValues<PermissionPolicy>())
        {
            if (Policy.HasFlag(value))
            {
                list.Add(value);
            }
        }

        _policies = list;
    }
    private void Submit() => Dialog.Close(DialogResult.Ok(_policies));
}