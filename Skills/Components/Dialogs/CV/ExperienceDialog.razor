@using System.ComponentModel.DataAnnotations
@using Skills.Models.Overview

<MudDialog>
    <DialogContent>
        <CloseButton Dialog="@Dialog"/>
        <EditForm Model="@_model" OnValidSubmit="@Submit">
            <DataAnnotationsValidator/>
            <MudStack Class="px-4 py-2" Justify="Justify.SpaceEvenly" Row="false" Spacing="0">
                <MudStack Class="mb-2" Row>
                    <MudTextField T="string" @bind-Value="_model.Category" For="@(() => _model.Category)" Required Label="Secteur d'activité" Style="width: 200px;"/>
                    <MudTextField T="string" @bind-Value="_model.Title" For="@(() => _model.Title)" Required Label="Titre" Style="width: 400px;"/>
                </MudStack>
                <MudStack Class="my-2" Row>
                    <MudDatePicker @bind-Date="_model.StartsAt" DateFormat="MM-yyyy" FixDay="1" Label="Début (période)" ShowWeekNumbers Editable 
                                   Mask="@(new DateMask("MM-yyyy"))" For="@(() => _model.StartsAt)" Required Adornment="Adornment.Start" Clearable />
                    <MudDatePicker @bind-Date="_model.EndsAt" DateFormat="MM-yyyy" FixDay="1" Label="Fin (période)" Editable 
                                   Mask="@(new DateMask("MM-yyyy"))" For="@(() => _model.EndsAt)" HelperText="Optionnel" Adornment="Adornment.Start" Clearable />
                </MudStack>
                <MudStack Class="mb-2" Row>
                    <MudTextField T="string" @bind-Value="_model.Description" For="@(() => _model.Description)" Label="Description" Lines="3" HelperText="Optionnel" />
                </MudStack>
            </MudStack>
            <MudStack Row>
                <MudSpacer/>
                <MudButton Class="open-sans-600 mr-n4" Color="Color.Success" Variant="Variant.Filled" ButtonType="ButtonType.Submit">Enregistrer</MudButton>
            </MudStack>
        </EditForm>
    </DialogContent>
</MudDialog>

@code {
    [CascadingParameter] public MudDialogInstance Dialog { get; set; } = null!;
    [Parameter] public UserExperienceInfo? Experience { get; set; }

    private UserExperienceModel _model = new();

    protected override void OnInitialized()
    {
        if (Experience != null)
        {
            _model.Category = Experience.Category;
            _model.Title = Experience.Title;
            _model.StartsAt = Experience.StartsAt;
            _model.EndsAt = Experience.EndsAt;
            _model.Description = Experience.Description;
        }
    }
    
    private void Submit()
    {
        var experience = new UserExperienceInfo
        {
            Category = _model.Category,
            Title = _model.Title,
            StartsAt = _model.StartsAt ?? DateTime.Now,
            EndsAt = _model.EndsAt,
            Description = _model.Description
        };
        if (Experience != null) experience.Id = Experience.Id;
        Dialog.Close(experience);
    }

    private sealed class UserExperienceModel
    {
        [Required(ErrorMessage = "Veuillez spécifier le secteur d'activité")] public string Category { get; set; } = string.Empty;
        [Required(ErrorMessage = "Veuillez spécifier un titre")] public string Title { get; set; } = string.Empty;
        [Required(ErrorMessage = "Veuillez une date de début")] public DateTime? StartsAt { get; set; } = DateTime.Now;
        public DateTime? EndsAt { get; set; }
        public string Description { get; set; } = string.Empty;
    }
}